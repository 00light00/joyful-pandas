****************************
第一章 预备知识
****************************

一、Python基础
===================

本节将涉及一部分可能被忽略的 ``Python`` 基础知识，以供尚还不熟悉的读者查缺补漏。

1. 列表推导式
-------------------

2. 匿名函数与map方法
------------------------

3. reduce与filter
------------------------

4. zip对象与enumerate方法
----------------------------

5. 格式化输出
-----------------

二、Numpy基础
===================

.. ipython:: python
    
    import numpy as np

1. np数组的构造
----------------------

2. np数组的变形
---------------------

3. 常用的数组方法
---------------------

三、练习
===================

Ex1：改进矩阵计算的性能
------------------------------

设 :math:`Z` 为 :math:`m\times n` 的矩阵， :math:`B` 和 :math:`U` 分别是 :math:`m\times p` 和 :math:`n\times p` 的矩阵， :math:`B_i` 为 :math:`B` 的第 :math:`i` 行， :math:`U_j` 为 :math:`U` 的第 :math:`j` 行，下面定义 :math:`\displaystyle R=\sum_{i=1}^m\sum_{j=1}^n\|B_i-U_j\|_2^2Z_{ij}` ，其中 :math:`\|\mathbf{a}\|_2^2` 表示向量 :math:`\mathbf{a}` 的分量平方和 :math:`\sum_i a_i^2` 。

现有某人根据如下给定的样例数据计算 :math:`R` 的值，请充分利用 ``Numpy`` 中的函数，基于此问题改进这段代码的性能。

.. ipython:: python
    
    np.random.seed(0)
    m, n, p = 100, 80, 50
    B = np.random.randint(0, 2, (m, p))
    U = np.random.randint(0, 2, (n, p))
    Z = np.random.randint(0, 2, (m, n))

.. ipython:: python

    L_res = []
    for i in range(m):
        for j in range(n):
            norm_value = ((B[i]-U[j])**2).sum()
            L_res.append(norm_value*Z[i][j])
    sum(L_res)

Ex2：连续整数的最大长度
------------------------------

输入一个整数的 ``Numpy`` 数组，返回其中连续整数子数组的最大长度。例如，输入 [1,2,5,6,7]，[5,6,7]为具有最大长度的连续整数子数组，因此输出3；输入[3,2,1,2,3,4,6]，[1,2,3,4]为具有最大长度的连续整数子数组，因此输出4。请充分利用 ``Numpy`` 的内置函数完成。（提示：考虑使用 ``nonzero, diff`` 函数）