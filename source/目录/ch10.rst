****************************
第十章 时序数据
****************************

一、时间序列中的基本对象
===========================

时间序列的概念在日常生活中十分常见，但对于一个具体的时序事件而言，可以从多个时间对象的角度来描述。例如2020年9月7日周一早上8点整需要到教室上课，这个课会在当天早上10点结束，其中包含了哪些时间概念？

* 第一，会出现时间戳（Date times）的概念，即'2020-9-7 08:00:00'和'2020-9-7 10:00:00'这两个时间点分别代表了上课和下课的时刻，在pandas中称为 ``Timestamp`` 。同时，一系列的时间戳可以组成 ``DatetimeIndex`` ，而将它放到Series中后，Series的类型就变为了 ``datetime64[ns]`` ，如果有涉及时区则为 ``datetime64[ns, tz]``，其中tz是timezone的简写。

* 第二，会出现时间差（Time deltas）的概念，即上课需要的时间，两个 ``Timestamp`` 做差就得到了时间差，pandas中利用 ``Timedelta`` 来表示。类似的，一系列的时间差就组成了 ``TimedeltaIndex``， 而将它放到Series中后，Series的类型就变为了 ``timedelta64[ns]`` 。

* 第三，会出现时间段（Time spans）的概念，即在8点到10点这个区间都会持续地在上课，在pandas利用 ``Period`` 来表示。类似的，一系列的时间段就组成了 ``PeriodIndex``， 而将它放到Series中后，Series的类型就变为了 ``Period`` 。

* 第四，会出现日期偏置（Date offsets）的概念，假设你只知道9月的第一个周一早上8点要去上课，但不知道具体的日期，那么就需要一个类型来处理此类需求。再例如，想要知道2020年9月7日后的第30个工作日是哪一天，那么时间差就解决不了你的问题，从而pandas中的 ``DateOffset`` 就出现了。同时，pandas中没有为一列时间偏置专门设计存储类型，理由也很简单，因为需求比较奇怪，一般来说我们只需要对一批时间特征做一个统一的特殊日期偏置。

通过这个简单的例子，就能够容易地总结出官方文档中的这个 `表格 <https://pandas.pydata.org/docs/user_guide/timeseries.html#overview>`__ ：

============================   =========================  ===================   ==================================
概念                           单元素类型                  数组类型                         pandas数据类型
============================   =========================  ===================   ==================================
Date times                      ``Timestamp``              ``DatetimeIndex``     ``datetime64[ns]`` or ``datetime64[ns, tz]``
Time deltas                     ``Timedelta``              ``TimedeltaIndex``    ``timedelta64[ns]``
Time spans                      ``Period``                 ``PeriodIndex``       ``period[freq]``
Date offsets                    ``DateOffset``             ``None``              ``None``
============================   =========================  ===================   ==================================

下面就分别介绍这四种基本时间对象及其操作。

二、时间戳
===========================

三、时间差
===========================

四、时间段
===========================

五、日期偏置
===========================

.. admonition:: 关于时区问题的说明
   :class: caution

    各类时间对象的开发，除了使用python内置的datetime模块，pandas还利用了dateutil模块，很大一部分是为了处理时区问题。总所周知，我国是没有夏令时调整时间一说的，但有些国家会有这种做法，导致了相对而言一天里可能会有23/24/25个小时，也就是relativedelta，这使得Offset对象和Timedelta对象有了对同一问题处理产生不同结果的现象，其中的规则也较为复杂，官方文档的写法存在部分描述错误，并且难以对描述做出统一修正，因为牵涉到了Offset相关的很多组件。因此，本教程完全不考虑时区处理，如果对时区处理的时间偏置有兴趣了解讨论，可以联系我或者参见 `这里 <https://github.com/pandas-dev/pandas/pull/36516>`__ 的讨论。

六、窗口函数


.. admonition:: 窗口对象
   :class: hint

    在Pandas中一共设计了三类窗口对象：Rolling对象（滑动窗口）、Expanding对象（扩张窗口）以及EMW（指数加权窗口）对象。

1. 滑动窗口

所谓使用rolling滑窗函数就是对某一个定长区域的数据进行相应聚合，因此在聚合之前，首先需要通过 ``.rolling`` 得到滑窗对象。

.. ipython:: python
    
    import pandas as pd
    s = pd.Series([1,2,3,4,5])
    roller = s.rolling(window = 3)
    roller

在得到了Rolling对象后，能够使用相应的聚合函数进行计算：

.. ipython:: python

    roller.mean()
    roller.sum()

同样如对于第四章介绍的groupby对象一样，能够使用apply方法进行自定义聚合，例如上述的均值滑窗可以如下地等效写出：

.. ipython:: python

    roller.apply(lambda x:x.mean())

.. ipython:: python

    import matplotlib.pyplot as plt

    @savefig ch1.png width=400px
    plt.scatter([1,2],[3,4])

.. raw:: html
    
    <iframe class="markdown-player" 
  
    src="https://player.bilibili.com/player.html?aid=583388526&bvid=BV1Hz4y197yi&cid=199953467&page=1;high_quality=1&amp;danmaku=0&amp;as_wide=1" 
    
    width="80%" height="460" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>


.. hint::

    这是一个笔记


2. 扩张窗口

3. 指数加权窗口

4. 类窗口函数

s.diff.replace.fillna.fillna


六、重采样
===========================

round
shift
diff
ceil floor


.. math::

    \nabla^2 f =
    \frac{1}{r^2} \frac{\partial}{\partial r}
    \left( r^2 \frac{\partial f}{\partial r} \right) +
    \frac{1}{r^2 \sin \theta} \frac{\partial f}{\partial \theta}
    \left( \sin \theta \, \frac{\partial f}{\partial \theta} \right) +
    \frac{1}{r^2 \sin^2\theta} \frac{\partial^2 f}{\partial \phi^2}